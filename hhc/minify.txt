minify

minify做的核心处理
1、 处理类型：去除注释
	  具体内容：删除所有注释（包括块注释、行注释）
    举例说明：// comment -> 删除

2、 处理类型：删除多余空格、换行
		具体内容：把源码压成一行或者更紧凑的格式
		举例说明：{ a: 1 } -> {a:1}

3、 处理类型：缩短变量名（重命名）
		具体内容：把局部变量名改成最短的名字
		举例说明：let userName = ➔ let a =

4、 处理类型：常量折叠（constant folding）
		具体内容：编译时直接计算常量表达式
		举例说明：2 + 2 -> 4

5、 处理类型：死代码消除（tree-shaking + DCE）
		具体内容：删除不会执行到的代码块
		举例说明：if (false) { ... } ➔ 删除

6、处理类型：简化表达式
		具体内容：简化一些明显可以精简的表达式
		举例说明：!!x ➔ Boolean(x)

7、处理类型：合并变量声明
		具体内容：把多个 var/let/const 合并成一行
		举例说明：let a=1; let b=2; ➔ let a=1,b=2;

8、处理类型：简化控制流
		具体内容：把 if/else、return 结构压成最短形式
		举例说明：if (a) return true; else return false; ➔ return !!a;

9、处理类型：字符串合并
		具体内容：把相邻字符串字面量合并成一个
		举例说明："a" + "b" ➔ "ab"

10、处理类型：css minify（如果有）
		具体内容：压缩 css 选择器、属性、省略单位等
		举例说明：margin: 0px 0px 0px 0px ➔ margin:0



功能模块							文件							说明
重命名变量（Renamer）	renamer.go			负责生成短变量名a,b,c
常量折叠							js_parser.go 		里直接做，或者 during parsing	在解析阶段就识别能提前算的
死代码消除（DCE）			linker.go				分析模块依赖关系，移除无用的代码
合并控制流						js_printer.go		打印代码时智能改写
CSS压缩							css_printer.go	专门压CSS（字体单位、颜色压缩）



1. build(...) 传入 { minify: true }
       ↓
2. 解析(parse) 源代码到 AST
       ↓
3. 在 AST 上做：
    - 常量折叠
    - 死代码消除
    - 合并变量
    - 重命名
       ↓
4. 打印(emit)最终js代码
    - 移除空格注释
    - 简化表达式
    - 最小化控制流
       ↓
5. 输出 minified 文件





